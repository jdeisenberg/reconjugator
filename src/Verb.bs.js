// Generated by BUCKLESCRIPT VERSION 3.0.0, PLEASE EDIT WITH CARE
'use strict';

var Belt_Id = require("bs-platform/lib/js/belt_Id.js");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");

var cmp = Caml_obj.caml_compare;

var VerbTypeComparator = Belt_Id.MakeComparable(/* module */[/* cmp */cmp]);

var cmp$1 = Caml_obj.caml_compare;

var ConjComparator = Belt_Id.MakeComparable(/* module */[/* cmp */cmp$1]);

function joinArray(delimiter, items) {
  return Belt_Array.reduce(items, "", (function (acc, item) {
                  return acc + (delimiter + item);
                })).substr(delimiter.length);
}

function stringOfArray(items) {
  return "[|" + (joinArray(",", Belt_Array.map(items, (function (item) {
                      return "{js|" + (item + "|js}");
                    }))) + "|]");
}

function stringOfPattern(p) {
  var number = p[/* number */0];
  var model = p[/* model */1];
  var present = stringOfArray(p[/* present */2]);
  var imperfect = stringOfArray(p[/* imperfect */3]);
  var preterite = stringOfArray(p[/* preterite */4]);
  var future = stringOfArray(p[/* future */5]);
  var conditional = stringOfArray(p[/* conditional */6]);
  var participle = p[/* participle */7];
  var gerund = p[/* gerund */8];
  return "{\n  number: " + (String(number) + (",\n  model: {js|" + (String(model) + ("|js},\n  present: " + (String(present) + (",\n  imperfect: " + (String(imperfect) + (",\n  preterite: " + (String(preterite) + (",\n  future: " + (String(future) + (",\n  conditional: " + (String(conditional) + (",\n  participle: {js|" + (String(participle) + ("|js},\n  gerund: {js|" + (String(gerund) + "|js}\n  }")))))))))))))))));
}

function conjugationOfString(s) {
  switch (s) {
    case "AR" : 
        return /* Some */[/* AR */0];
    case "ER" : 
        return /* Some */[/* ER */1];
    case "IR" : 
        return /* Some */[/* IR */2];
    default:
      return /* None */0;
  }
}

function verbTypeOfString(s) {
  switch (s) {
    case "Irregular" : 
        return /* Some */[/* Irregular */2];
    case "Regular" : 
        return /* Some */[/* Regular */0];
    case "StemChanging" : 
        return /* Some */[/* StemChanging */1];
    default:
      return /* None */0;
  }
}

exports.VerbTypeComparator = VerbTypeComparator;
exports.ConjComparator = ConjComparator;
exports.joinArray = joinArray;
exports.stringOfPattern = stringOfPattern;
exports.conjugationOfString = conjugationOfString;
exports.verbTypeOfString = verbTypeOfString;
/* VerbTypeComparator Not a pure module */
