// Generated by BUCKLESCRIPT VERSION 3.0.0, PLEASE EDIT WITH CARE
'use strict';

var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var Js_primitive = require("bs-platform/lib/js/js_primitive.js");
var WebUtils$Spanishverb = require("./WebUtils.bs.js");

function getStem(s) {
  return s.substring(0, s.length - 2 | 0);
}

function conjugate(v, tense, person, number) {
  var stemParts = getStem(v[/* spanish */0]).split("/");
  var n = (person - 1 | 0) + (
    number ? 3 : 0
  ) | 0;
  var tmp;
  switch (tense) {
    case 0 : 
        tmp = v[/* pattern */5][/* present */2];
        break;
    case 1 : 
        tmp = v[/* pattern */5][/* imperfect */3];
        break;
    case 2 : 
        tmp = v[/* pattern */5][/* preterite */4];
        break;
    case 3 : 
        tmp = v[/* pattern */5][/* future */5];
        break;
    case 4 : 
        tmp = v[/* pattern */5][/* conditional */6];
        break;
    
  }
  var ending = Belt_Array.getExn(tmp, n);
  var endParts = ending.split("/");
  var match = stemParts.length;
  var match$1 = endParts.length;
  var exit = 0;
  var switcher = match - 1 | 0;
  if (switcher > 2 || switcher < 0) {
    exit = 1;
  } else {
    switch (switcher) {
      case 0 : 
          if (match$1 !== 1) {
            exit = 1;
          } else {
            return Caml_array.caml_array_get(stemParts, 0) + Caml_array.caml_array_get(endParts, 0);
          }
          break;
      case 1 : 
          exit = 1;
          break;
      case 2 : 
          if (match$1 !== 1) {
            if (match$1 !== 2) {
              exit = 1;
            } else {
              return Caml_array.caml_array_get(stemParts, 0) + (Caml_array.caml_array_get(endParts, 0) + (Caml_array.caml_array_get(stemParts, 2) + Caml_array.caml_array_get(endParts, 1)));
            }
          } else {
            return Caml_array.caml_array_get(stemParts, 0) + (Caml_array.caml_array_get(stemParts, 1) + (Caml_array.caml_array_get(stemParts, 2) + Caml_array.caml_array_get(endParts, 0)));
          }
          break;
      
    }
  }
  if (exit === 1) {
    return Caml_array.caml_array_get(stemParts, 0) + Caml_array.caml_array_get(endParts, 0);
  }
  
}

function formRead() {
  var resultElement = document.getElementById("result");
  var resultElement$1 = (resultElement == null) ? /* None */0 : [resultElement];
  console.log("result element", resultElement$1);
  var result = WebUtils$Spanishverb.getStringValue(Js_primitive.null_undefined_to_opt(document.getElementById("tense")));
  console.log("String value from tense is:", result);
  if (result) {
    WebUtils$Spanishverb.setText(result[0], resultElement$1);
  } else {
    WebUtils$Spanishverb.setText("", resultElement$1);
  }
  return /* () */0;
}

var S = 0;

var V = 0;

exports.S = S;
exports.V = V;
exports.getStem = getStem;
exports.conjugate = conjugate;
exports.formRead = formRead;
/* No side effect */
