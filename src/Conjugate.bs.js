// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Belt_Set = require("bs-platform/lib/js/belt_Set.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Verb$Spanishverb = require("./Verb.bs.js");
var VerbList$Spanishverb = require("./VerbList.bs.js");
var WebUtils$Spanishverb = require("./WebUtils.bs.js");
var Webapi__Dom__Element = require("bs-webapi/src/Webapi/Webapi__Dom/Webapi__Dom__Element.js");
var Webapi__Dom__Document = require("bs-webapi/src/Webapi/Webapi__Dom/Webapi__Dom__Document.js");
var Webapi__Dom__HtmlElement = require("bs-webapi/src/Webapi/Webapi__Dom/Webapi__Dom__HtmlElement.js");

var reflexPronoun = /* array */[
  "me",
  "te",
  "se",
  "nos",
  "vos",
  "se"
];

function getStem(s) {
  return s.substring(0, s.length - 2 | 0);
}

function conjugate(v, tense, person, number) {
  var stemParts = getStem(v.spanish).split("/");
  var n = (person - 1 | 0) + (
    number ? 3 : 0
  ) | 0;
  var tmp;
  switch (tense) {
    case /* Present */0 :
        tmp = v.pattern.present;
        break;
    case /* Imperfect */1 :
        tmp = v.pattern.imperfect;
        break;
    case /* Preterite */2 :
        tmp = v.pattern.preterite;
        break;
    case /* Future */3 :
        tmp = v.pattern.future;
        break;
    case /* Conditional */4 :
        tmp = v.pattern.conditional;
        break;
    
  }
  var ending = Belt_Array.getExn(tmp, n);
  var endParts = ending.split("/");
  var match = stemParts.length;
  var match$1 = endParts.length;
  var base;
  var exit = 0;
  switch (match) {
    case 1 :
        if (match$1 !== 1) {
          exit = 1;
        } else {
          base = Caml_array.caml_array_get(stemParts, 0) + Caml_array.caml_array_get(endParts, 0);
        }
        break;
    case 2 :
        exit = 1;
        break;
    case 3 :
        if (match$1 !== 1) {
          if (match$1 !== 2) {
            exit = 1;
          } else {
            base = Caml_array.caml_array_get(stemParts, 0) + (Caml_array.caml_array_get(endParts, 0) + (Caml_array.caml_array_get(stemParts, 2) + Caml_array.caml_array_get(endParts, 1)));
          }
        } else {
          base = Caml_array.caml_array_get(stemParts, 0) + (Caml_array.caml_array_get(stemParts, 1) + (Caml_array.caml_array_get(stemParts, 2) + Caml_array.caml_array_get(endParts, 0)));
        }
        break;
    default:
      exit = 1;
  }
  if (exit === 1) {
    base = Caml_array.caml_array_get(stemParts, 0) + Caml_array.caml_array_get(endParts, 0);
  }
  var match$2 = v.reflexive;
  if (match$2) {
    return Caml_array.caml_array_get(reflexPronoun, n) + (" " + base);
  } else {
    return base;
  }
}

function keeper(f, n) {
  var match = Curry._1(Webapi__Dom__HtmlElement.ofNode, n);
  if (match !== undefined) {
    var element = Caml_option.valFromOption(match);
    if (element.checked) {
      return Curry._1(f, element.value);
    } else {
      return ;
    }
  }
  
}

function requestedConjugations(htmlDoc) {
  var conjInput = Array.prototype.slice.call(htmlDoc.getElementsByName("conj"));
  return Belt_Set.fromArray(Belt_Array.keepMap(conjInput, (function (param) {
                    return keeper(Verb$Spanishverb.conjugationOfString, param);
                  })), Verb$Spanishverb.ConjComparator);
}

function requestedVerbTypes(htmlDoc) {
  var typeInput = Array.prototype.slice.call(htmlDoc.getElementsByName("verbType"));
  return Belt_Set.fromArray(Belt_Array.keepMap(typeInput, (function (param) {
                    return keeper(Verb$Spanishverb.verbTypeOfString, param);
                  })), Verb$Spanishverb.VerbTypeComparator);
}

function createMenuItem(content, value) {
  var el = document.createElement("option");
  el.setAttribute("value", String(value));
  el.textContent = content;
  return el;
}

function infinitive(v) {
  var match = v.reflexive;
  return v.spanish.replace((/\//g), "") + (
          match ? "se" : ""
        );
}

function filterVerbs(_evt) {
  var htmlDoc = Webapi__Dom__Document.asHtmlDocument(document);
  if (htmlDoc !== undefined) {
    var htmlDoc$1 = Caml_option.valFromOption(htmlDoc);
    var conjSet = requestedConjugations(htmlDoc$1);
    var typeSet = requestedVerbTypes(htmlDoc$1);
    var match = document.getElementById("reflexive");
    var isReflexive = (match == null) ? false : match.checked;
    WebUtils$Spanishverb.clearChildrenById("verbList");
    var verbListMenu = document.getElementById("verbList");
    if (verbListMenu == null) {
      return /* () */0;
    } else {
      var matching = WebUtils$Spanishverb.keepMapWithIndex(VerbList$Spanishverb.verbList, (function (idx, item) {
              if (Belt_Set.has(conjSet, item.conj) && Belt_Set.has(typeSet, item.type_) && isReflexive === item.reflexive) {
                return /* tuple */[
                        idx + 1 | 0,
                        item
                      ];
              }
              
            }));
      var match$1 = matching.length === 0;
      verbListMenu.appendChild(createMenuItem(match$1 ? "No verbs meet your criteria" : "Choose a verb", 0));
      return Belt_Array.forEach(matching, (function (item) {
                    verbListMenu.appendChild(createMenuItem(infinitive(item[1]), item[0]));
                    return /* () */0;
                  }));
    }
  } else {
    return /* () */0;
  }
}

function conjugateVerb(_evt) {
  var verbOption = WebUtils$Spanishverb.getIntValue("verbList");
  var tenseOption = Belt_Option.flatMap(WebUtils$Spanishverb.getStringValue("tense"), Verb$Spanishverb.tenseOfString);
  if (verbOption !== undefined && tenseOption !== undefined) {
    var tense = tenseOption;
    var verb = Caml_array.caml_array_get(VerbList$Spanishverb.verbList, verbOption - 1 | 0);
    WebUtils$Spanishverb.setText(infinitive(verb) + (" (" + (verb.english + ")")), Caml_option.nullable_to_opt(document.getElementById("verbTitle")), " ");
    return Belt_Array.forEach(Belt_Array.range(0, 5), (function (n) {
                  var match = n < 3;
                  return WebUtils$Spanishverb.setText(conjugate(verb, tense, n % 3 + 1 | 0, match ? /* Singular */0 : /* Plural */1), Caml_option.nullable_to_opt(document.getElementById("v" + String(n))), "");
                }));
  } else {
    return /* () */0;
  }
}

var setOnChange = (
  function(element, fcn) {
    element.onchange = fcn
  }
);

function setOnChangeId(id, f) {
  var match = document.getElementById(id);
  if (match == null) {
    return /* () */0;
  } else {
    return Curry._2(setOnChange, match, f);
  }
}

function setArrayChange(arr, fcn) {
  return Belt_Array.forEach(arr, (function (item) {
                var match = Webapi__Dom__Element.ofNode(item);
                if (match !== undefined) {
                  return Curry._2(setOnChange, Caml_option.valFromOption(match), fcn);
                } else {
                  return /* () */0;
                }
              }));
}

var htmlDoc = Webapi__Dom__Document.asHtmlDocument(document);

if (htmlDoc !== undefined) {
  var htmlDoc$1 = Caml_option.valFromOption(htmlDoc);
  setArrayChange(Array.prototype.slice.call(htmlDoc$1.getElementsByName("conj")), filterVerbs);
  setArrayChange(Array.prototype.slice.call(htmlDoc$1.getElementsByName("verbType")), filterVerbs);
  setArrayChange(Array.prototype.slice.call(htmlDoc$1.getElementsByName("reflexive")), filterVerbs);
  setOnChangeId("verbList", conjugateVerb);
  setOnChangeId("tense", conjugateVerb);
}

var S = /* alias */0;

var V = /* alias */0;

var U = /* alias */0;

var Arr = /* alias */0;

var $$Set = /* alias */0;

exports.S = S;
exports.V = V;
exports.U = U;
exports.Arr = Arr;
exports.$$Set = $$Set;
exports.reflexPronoun = reflexPronoun;
exports.getStem = getStem;
exports.conjugate = conjugate;
exports.keeper = keeper;
exports.requestedConjugations = requestedConjugations;
exports.requestedVerbTypes = requestedVerbTypes;
exports.createMenuItem = createMenuItem;
exports.infinitive = infinitive;
exports.filterVerbs = filterVerbs;
exports.conjugateVerb = conjugateVerb;
exports.setOnChange = setOnChange;
exports.setOnChangeId = setOnChangeId;
exports.setArrayChange = setArrayChange;
exports.htmlDoc = htmlDoc;
/* setOnChange Not a pure module */
